name: CI/CD to EC2 via ECR Private

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-ec2
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Credenciales AWS para ECR Private
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # ECR Private usa la región específica

      # Login a ECR Private (NO public)
      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build & Push a ECR Private
      - name: Build, tag and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # 455820317622.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: nginx-gsosa  # Tu repositorio real
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                       -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Despliegue en EC2 
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: GITHUB_SHA
          script: |
            set -e
            cd /home/ec2-user/app
            echo "IMAGE_TAG=${GITHUB_SHA}" > .env

            # Para ECR Private SÍ necesitas login
            aws ecr get-login-password --region us-east-1 \
            | docker login --username AWS --password-stdin 455820317622.dkr.ecr.us-east-1.amazonaws.com

            # Actualiza la imagen usando el repositorio correcto
            docker pull 455820317622.dkr.ecr.us-east-1.amazonaws.com/nginx-gsosa:${GITHUB_SHA}
            
            # Si usas docker-compose, actualiza tu docker-compose.yml para usar la nueva imagen
            docker compose pull frontend || docker-compose pull frontend
            docker compose up -d frontend || docker-compose up -d frontend
            docker image prune -af --filter "until=48h"