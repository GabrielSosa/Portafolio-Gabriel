name: CI/CD to EC2 via ECR Public

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-ec2
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Credenciales AWS (ECR Public usa us-east-1)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login a ECR Public
      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      # Build & Push a ECR Public (latest y SHA)
      - name: Build, tag and push image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}   # public.ecr.aws
          REGISTRY_ALIAS: ${{ secrets.ECR_PUBLIC_ALIAS }}            # tu alias
          REPOSITORY: nginx-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest \
                       -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

      # Despliegue en EC2 (actualiza solo frontend)
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: GITHUB_SHA
          script: |
            set -e
            cd /home/ec2-user/app
            echo "IMAGE_TAG=${GITHUB_SHA}" > .env

            # Para ECR Public NO es necesario login para pull (es público),
            # pero si quieres evitar límites, podrías loguearte con AWS CLI:
            # aws ecr-public get-login-password --region us-east-1 \
            # | docker login --username AWS --password-stdin public.ecr.aws

            docker compose pull frontend
            docker compose up -d frontend
            docker image prune -af --filter "until=48h"